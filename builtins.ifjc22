
LABEL $TO_GOOD_TYPE
PUSHFRAME
CREATEFRAME
DEFVAR TF@$VAL_OP1
DEFVAR TF@$VAL_OP2
DEFVAR TF@$CONVERT_OP2
POPS TF@$VAL_OP2
POPS TF@$VAL_OP1
DEFVAR TF@$OP1_TYPE
DEFVAR TF@$OP2_TYPE
TYPE TF@$OP1_TYPE TF@$VAL_OP1
TYPE TF@$OP2_TYPE TF@$VAL_OP2
PUSHS TF@$VAL_OP1
PUSHS TF@$VAL_OP2
JUMPIFEQ $SAME_TYPES TF@$OP1_TYPE TF@$OP2_TYPE
JUMPIFEQ $OP1_IS_INT TF@$OP1_TYPE string@int                                                
JUMPIFEQ $OP1_IS_FLOAT TF@$OP1_TYPE string@float
JUMPIFEQ $OP1_IS_STR TF@$OP1_TYPE string@string
JUMPIFEQ $OP1_IS_BOOL TF@$OP1_TYPE string@bool                                                
LABEL $OP1_IS_INT                               
    CALL $intval
    JUMP $SAME_TYPES              
LABEL $OP1_IS_FLOAT
    CALL $floatval 
    JUMP $SAME_TYPES
LABEL $OP1_IS_STR
    CALL $strval    
    JUMP $SAME_TYPES
LABEL $OP1_IS_BOOL
    CALL $boolval
LABEL $SAME_TYPES
    POPFRAME
    RETURN

###################################################################
#Vraci hodnotu prevedenou do INT
LABEL $intval
PUSHFRAME
CREATEFRAME
DEFVAR TF@$OP
DEFVAR TF@$TYPE_OP
POPS TF@$OP                                 #Naplni OP
TYPE TF@$TYPE_OP TF@$OP
JUMPIFEQ $INTVAL_END TF@$TYPE_OP string@int              #INT se na INT nemeni
JUMPIFEQ $INTVAL_OP_IS_FLOAT TF@$TYPE_OP string@float
JUMPIFEQ $INTVAL_OP_IS_STR TF@$TYPE_OP string@string
JUMPIFEQ $INTVAL_OP_IS_BOOL TF@$TYPE_OP string@bool

LABEL $INTVAL_OP_IS_FLOAT
    FLOAT2INT TF@$OP TF@$OP
    JUMP $INTVAL_END

LABEL $INTVAL_OP_IS_STR
#UNSUPPORT TYPE
    EXIT int@4      
    
LABEL $INTVAL_OP_IS_BOOL
    JUMPIFNEQ $INTVAL_BOOL_IS_ZERO TF@$OP bool@false
    PUSHS int@0
    POPFRAME
    RETURN
    LABEL $INTVAL_BOOL_IS_ZERO
    PUSHS int@1
    POPFRAME
    RETURN

LABEL $INTVAL_END
    PUSHS TF@$OP
    POPFRAME
    RETURN
####################################################################
#Return value converted to FLOAT
#Return value converted to FLOAT
LABEL $floatval

PUSHFRAME
CREATEFRAME
DEFVAR TF@$OP
DEFVAR TF@$TYPE_OP
POPS TF@$OP
TYPE TF@$TYPE_OP TF@$OP
JUMPIFEQ $FLOATVAL_END TF@$TYPE_OP string@float
JUMPIFEQ $FLOATVAL_OP_IS_INT  TF@$TYPE_OP string@int
JUMPIFEQ $FLOATVAL_OP_IS_STR  TF@$TYPE_OP string@string
JUMPIFEQ $FLOATVAL_OP_IS_BOOL TF@$TYPE_OP string@bool
JUMPIFEQ $FLOATVAL_OP_IS_NULL TF@$TYPE_OP string@nil

LABEL $FLOATVAL_OP_IS_INT
    INT2FLOAT TF@$OP TF@$OP
    JUMP $FLOATVAL_END

LABEL $FLOATVAL_OP_IS_BOOL
    JUMPIFEQ $FLOATVAL_BOOL_IS_ZERO TF@$OP bool@false      #OP == FALSE
    PUSHS float@0x1.0p+0
    POPFRAME                     
    RETURN
    LABEL $FLOATVAL_BOOL_IS_ZERO                            #OP != FALSE
    PUSHS float@0x0.0p+0
    POPFRAME
    RETURN

LABEL $FLOATVAL_OP_IS_STR      
#Unsupport type
    EXIT int@4

LABEL $FLOATVAL_OP_IS_NULL
    PUSHS float@0x0.0p+0
    POPFRAME
    RETURN

LABEL $FLOATVAL_END
    PUSHS TF@$OP
    POPFRAME
    RETURN
################################################################
#Vraci hodnotu prevedenou do STR
LABEL $strval

PUSHFRAME
CREATEFRAME

DEFVAR TF@$OP
DEFVAR TF@$TYPE_OP
POPS TF@$OP
TYPE TF@$TYPE_OP TF@$OP
JUMPIFEQ $STRVAL_END TF@$TYPE_OP string@string
JUMPIFEQ $STRVAL_OP_IS_INT  TF@$TYPE_OP string@int
JUMPIFEQ $STRVAL_OP_IS_FLOAT  TF@$TYPE_OP string@float
JUMPIFEQ $STRVAL_OP_IS_BOOL TF@$TYPE_OP string@bool
JUMPIFEQ $STRVAL_OP_IS_NULL TF@$TYPE_OP string@nil

LABEL $STRVAL_OP_IS_FLOAT
LABEL $STRVAL_OP_IS_INT
#UNSUPPORT TYPE
    EXIT int@4


LABEL $STRVAL_OP_IS_BOOL
    JUMPIFEQ $STRVAL_BOOL_IS_ZERO TF@$OP bool@false 
    PUSHS string@true
    POPFRAME
    RETURN
    LABEL $STRVAL_BOOL_IS_ZERO
    PUSHS string@false  
    POPFRAME                           
    RETURN

LABEL $STRVAL_OP_IS_NULL
    PUSHS string@
    RETURN

LABEL $STRVAL_END
    PUSHS TF@$OP
    POPFRAME
    RETURN

##########################################################
#Vraci hodnotu prevedenou do BOOL
LABEL $boolval
PUSHFRAME
CREATEFRAME
DEFVAR TF@$OP
DEFVAR TF@$TYPE_OP
POPS TF@$OP
TYPE TF@$TYPE_OP TF@$OP

JUMPIFEQ $BOOLVAL_END TF@$TYPE_OP string@bool
JUMPIFEQ $BOOLVAL_OP_IS_INT  TF@$TYPE_OP string@int
JUMPIFEQ $BOOLVAL_OP_IS_FLOAT  TF@$TYPE_OP string@float
JUMPIFEQ $BOOLVAL_OP_IS_STR TF@$TYPE_OP string@string
JUMPIFEQ &BOOLVAL_OP_IN_NULL TF@$TYPE_OP string@nil

LABEL $BOOLVAL_OP_IS_INT
    JUMPIFEQ $INT_OP_IS_ZERO TF@$OP int@0
    PUSHS bool@true
    POPFRAME
    RETURN
    LABEL $INT_OP_IS_ZERO
    PUSHS bool@false
    POPFRAME
    RETURN

LABEL $BOOLVAL_OP_IS_FLOAT
    JUMPIFEQ $FLOAT_OP_IS_ZERO TF@$OP float@0x0.0p+0
    PUSHS bool@true
    POPFRAME
    RETURN
    LABEL $FLOAT_OP_IS_ZERO
    PUSHS bool@false
    POPFRAME
    RETURN

LABEL $BOOLVAL_OP_IS_STR    
    JUMPIFEQ $STR_OP_IS_EMPTY TF@$OP string@
    PUSHS bool@true
    POPFRAME
    RETURN
    LABEL $STR_OP_IS_EMPTY
    PUSHS bool@false
    POPFRAME
    RETURN

LABEL &BOOLAVL_OP_IN_NULL
    PUSHS bool@false
    POPFRAME
    RETURN

LABEL $BOOLVAL_END
    PUSHS TF@$OP
    POPFRAME
    RETURN
###############################################################
#ORD & CHR
###############################################################
#ORD(op) => int hodnota op
LABEL $ORD
PUSHS int@0
STRI2INTS
RETURN
###############################################################
#CHR(op) => prevod int so ascii
LABEL $CHR
INT2CHARS
RETURN
###############################################################
#COMPARE
###############################################################
#LT(op1, op2)  <
#Vrací true/false na stack
LABEL $LT
CALL $TO_GOOD_TYPE
LTS
RETURN
###############################################################
#GT(op1, op2)  >
#Vrací true/false na stack
LABEL $GT
CALL $TO_GOOD_TYPE
GTS
RETURN
################################################################
#EQ(op1, op2)   ==
#Vrací true/false na stack
LABEL $EQ
CALL $TO_GOOD_TYPE
EQS
RETURN
###############################################################
#LTEQ(op1, op2)  LT || EQ
#Vrací true/false na stack
LABEL $LTEQ
CALL $TO_GOOD_TYPE
PUSHFRAME
CREATEFRAME
DEFVAR TF@$OP1
DEFVAR TF@$OP2
DEFVAR TF@$LT_RES
DEFVAR TF@$EQ_RES
DEFVAR TF@$OR_RES
POPS TF@$OP1
POPS TF@$OP2
LT TF@$LT_RES TF@$OP1 TF@$OP2
EQ TF@$EQ_RES TF@$OP1 TF@$OP2
OR TF@$OR_RES TF@$LT_RES TF@$EQ_RES
PUSHS TF@$OR_RES
POPFRAME
RETURN
###############################################################
#GTEQ(op1, op2)  GT || EQ
#Vrací true/false na stack
LABEL $GTEQ
CALL $TO_GOOD_TYPE
PUSHFRAME
CREATEFRAME
DEFVAR TF@$OP1
DEFVAR TF@$OP2
DEFVAR TF@$GT_RES
DEFVAR TF@$EQ_RES
DEFVAR TF@$OR_RES
POPS TF@$OP1
POPS TF@$OP2
GT TF@$GT_RES TF@$OP1 TF@$OP2
EQ TF@$EQ_RES TF@$OP1 TF@$OP2
OR TF@$OR_RES TF@$GT_RES TF@$EQ_RES
PUSHS TF@$OR_RES
POPFRAME
RETURN
###############################################################
#ARITMETIC
###############################################################

#funkce kontroluje a pripadne nastavuje typy tak 
#aby se s nimi dali provézt aritemtické operace
#ARITMETICT_TYPE(op1, op2)
#op1, op2 mohou být typ int, float, bool

#Povolené INT, FLOAT a BOOL
LABEL $ARITMETICT_TYPE  

PUSHFRAME
CREATEFRAME

DEFVAR TF@$op2
DEFVAR TF@op1$type
DEFVAR TF@$op1
DEFVAR TF@op2$type

POPS TF@$op1
POPS TF@$op2
TYPE TF@op1$type TF@$op1
TYPE TF@op2$type TF@$op2
JUMPIFEQ $ATR_STR TF@op1$type string@string
JUMPIFNEQ $ART_NOT_EQL_TYPES TF@op2$type string@string
LABEL $ATR_STR
    EXIT int@4

LABEL $ART_NOT_EQL_TYPES
JUMPIFEQ $ART_CONVERT_OP2_TO_FLOAT TF@op1$type string@float
JUMPIFEQ $ART_CONVERT_OP1_TO_FLOAT TF@op2$type string@float
JUMPIFEQ $ART_CONVERT_OP1_FROM_BOOL TF@op1$type string@bool
JUMPIFEQ $ART_CONVERT_OP2_FROM_BOOL TF@op2$type string@bool
PUSHS TF@$op2
PUSHS TF@$op1
JUMP $ART_END

LABEL $ART_CONVERT_OP1_TO_FLOAT
    PUSHS TF@$op2
    PUSHS TF@$op1
    CALL $TO_GOOD_TYPE
    JUMP $ART_END

LABEL $ART_CONVERT_OP2_TO_FLOAT
    PUSHS TF@$op1
    PUSHS TF@$op2
    CALL $TO_GOOD_TYPE
    CALL $SWITCH_IN_STACK
    JUMP $ART_END

LABEL $ART_CONVERT_OP1_FROM_BOOL
    JUMPIFEQ $ART_BOTH_BOOL TF@op1$type TF@op2$type
    PUSHS TF@$op2
    PUSHS TF@$op1
    CALL $TO_GOOD_TYPE
    JUMP $ART_END

LABEL $ART_CONVERT_OP2_FROM_BOOL
    PUSHS TF@$op1
    PUSHS TF@$op2
    CALL $TO_GOOD_TYPE
    CALL $SWITCH_IN_STACK
    JUMP $ART_END

LABEL $ART_BOTH_BOOL
    PUSHS TF@$op2
    CALL $intval
    PUSHS TF@$op1
    CALL $intval
    JUMP $ART_END

LABEL $ART_END
POPFRAME
RETURN
#####################################################################
LABEL $SWITCH_IN_STACK
PUSHFRAME
CREATEFRAME
DEFVAR TF@$op1
DEFVAR TF@$op2
POPS TF@$op1
POPS TF@$op2
PUSHS TF@$op1
PUSHS TF@$op2
POPFRAME
RETURN
#####################################################################
LABEL $MUL
CALL $ARITMETICT_TYPE
MULS
RETURN
#####################################################################
LABEL $DIV
PUSHFRAME
CREATEFRAME
CALL $floatval
CALL $SWITCH_IN_STACK
CALL $floatval
CALL $SWITCH_IN_STACK
DIVS
RETURN
#####################################################################
LABEL $ADD
CALL $ARITMETICT_TYPE
ADDS
RETURN
#####################################################################
LABEL $SUB
CALL $ARITMETICT_TYPE
SUBS
RETURN
#####################################################################
#SUBSTRING(str, idx, ldx)
#idx - index zacatku substr
#ldx - posledni index substr
LABEL $SUBSTRING
PUSHFRAME
CREATEFRAME
DEFVAR TF@$full_string
POPS TF@$full_string
DEFVAR TF@$first_idx
POPS TF@$first_idx
DEFVAR TF@$last_idx
POPS TF@$last_idx
DEFVAR TF@$test
DEFVAR TF@$SUB_STR
GT TF@$test TF@$first_idx int@0
JUMPIFEQ $BAD_END_SUBSTR TF@$test bool@false
GT TF@$test TF@$last_idx TF@$first_idx
JUMPIFEQ $BAD_END_SUBSTR TF@$test bool@false
DEFVAR TF@$len
SUB TF@$len TF@$last_idx TF@$first_idx
GT TF@$test TF@$len int@0
JUMPIFEQ $BAD_END_SUBSTR TF@$test bool@false
    PUSHS TF@$full_string
    CALL $STRLEN
    DEFVAR TF@$STR_LEN
    POPS TF@$STR_LEN
    GT TF@$test TF@$STR_LEN TF@$len
    JUMPIFEQ $BAD_END_SUBSTR TF@$test bool@false
        GT TF@$test TF@$STR_LEN TF@$last_idx
     JUMPIFEQ $BAD_END_SUBSTR TF@$test bool@false
MOVE TF@$SUB_STR string@
DEFVAR TF@$char
LABEL $STR_FOR
    GETCHAR  TF@$char TF@$full_string TF@$first_idx
    CONCAT TF@$SUB_STR TF@$SUB_STR TF@$char
    ADD TF@$first_idx TF@$first_idx int@1
    JUMPIFNEQ $STR_FOR TF@$first_idx TF@$last_idx
PUSHS TF@$SUB_STR
POPFRAME
RETURN
LABEL $BAD_END_SUBSTR
MOVE TF@$SUB_STR nil@nil
PUSHS TF@$SUB_STR
POPFRAME
RETURN
##########################################################################
LABEL $STRLEN
PUSHFRAME
CREATEFRAME
DEFVAR TF@$LEN_OF_STR
POPS TF@$LEN_OF_STR
STRLEN TF@$LEN_OF_STR TF@$LEN_OF_STR
PUSHS TF@$LEN_OF_STR
POPFRAME
RETURN
