#prevod do spravnerho typu
#POP OP1
#POP OP2
# TO_GOOD_TYPE(op1, op2)

LABEL $TO_GOOD_TYPE
PUSHFRAME
DEFVAR LF@$VAL_OP1
DEFVAR LF@$VAL_OP2
DEFVAR LF@$CONVERT_OP2
POPS LF@$VAL_OP2
POPS LF@$VAL_OP1
DEFVAR LF@$OP1_TYPE
DEFVAR LF@$OP2_TYPE
TYPE LF@$OP1_TYPE LF@$VAL_OP1
TYPE LF@$OP2_TYPE LF@$VAL_OP2
PUSHS LF@$VAL_OP2                                        #OP2 na zasobnik aby to pak nemusel delat pod kazdym labelem
JUMPIFEQ $SAME_TYPES LF@$OP1_TYPE LF@$OP2_TYPE           #Když jsou typy stejné
JUMPIFEQ $OP1_IS_INT LF@$OP1_TYPE string@int                                                
JUMPIFEQ $OP1_IS_FLOAT LF@$OP1_TYPE string@float
JUMPIFEQ $OP1_IS_STR LF@$OP1_TYPE string@string
JUMPIFEQ $OP1_IS_BOOL LF@$OP1_TYPE string@bool                                                
LABEL $OP1_IS_INT                               
    CALL intval               
LABEL $OP1_IS_FLOAT
    CALL floatval 
LABEL $OP1_IS_STR
    CALL strval    
LABEL $OP1_IS_BOOL
    CALL boolval
LABEL $SAME_TYPES
    POPFRAME
    RETURN
###################################################################
#Vraci hodnotu prevedenou do INT
LABEL $intval
PUSHFRAME
DEFVAR LF@$OP
DEFVAR LF@$TYPE_OP
POPS LF@$OP                                 #Naplni OP
TYPE LF@$TYPE_OP LF@$OP
JUMPIFEQ $INTVAL_END LF@$TYPE_OP string@int              #INT se na INT nemeni
JUMPIFEQ $INTVAL_OP_IS_FLOAT LF@$TYPE_OP string@float
JUMPIFEQ $INTVAL_OP_IS_STR LF@$TYPE_OP string@string
JUMPIFEQ $INTVAL_OP_IS_BOOL LF@$TYPE_OP string@bool

LABEL $INTVAL_OP_IS_FLOAT
    INT2FLOAT LF@$OP LF@$OP
    JUMP $INTVAL_END

LABEL $INTVAL_OP_IS_STR
#UNSUPPORT TYPE
    EXIT int@4      
    
LABEL $INTVAL_OP_IS_BOOL
    JUMPIFEQ $INTVAL_BOOL_IS_ZERO LF@$OP bool@false
    PUSHS int@0                             # false == 0
    POPFRAME
    RETURN
    LABEL $INTVAL_BOOL_IS_ZERO
    PUSHS int@1
    POPFRAME                             # true == 1
    RETURN

LABEL $INTVAL_END
    PUSHS LF@$OP
    POPFRAME
    RETURN
####################################################################
#Return value converted to FLOAT
LABEL $floatval
PUSHFRAME
DEFVAR LF@$OP
DEFVAR LF@$TYPE_OP
POPS LF@$OP
TYPE LF@$TYPE_OP LF@$OP
JUMPIFEQ $FLOATVAL_END LF@$TYPE_OP string@int
JUMPIFEQ $FLOATVAL_OP_IS_INT  LF@$TYPE_OP string@int
JUMPIFEQ $FLOATVAL_OP_IS_STR  LF@$TYPE_OP string@string
JUMPIFEQ $FLOATVAL_OP_IS_BOOL LF@$TYPE_OP string@bool
JUMPIFEQ $FLOATVAL_OP_IS_NULL LF@$TYPE_OP string@null

LABEL $FLOATVAL_OP_IS_INT
    FLOAT2INT LF@$OP LF@$OP
    JUMP $FLOATVAL_END

LABEL $FLOATVAL_OP_IS_BOOL
    JUMPIFEQ $FLOATVAL_BOOL_ISN_ZERO LF@$OP bool@false      #OP == FALSE
    PUSHS float@0x1.0p+0
    POPFRAME                     
    RETURN
    LABEL $FLOATVAL_BOOL_IS_ZERO                            #OP != FALSE
    PUSHS float@0x0.0p+0
    POPFRAME
    RETURN

LABEL $FLOATVAL_OP_IS_STR      
#Unsupport type
    EXIT int@4

LABEL $FLOATVAL_OP_IS_NULL
    PUSHS float@0x0.0p+0
    POPFRAME
    RETURN


LABEL $FLOATVAL_END
    PUSHS LF@$OP
    POPFRAME
    RETURN

################################################################
#Vraci hodnotu prevedenou do STR
LABEL $strval
PUSHFRAME
DEFVAR LF@$OP
DEFVAR LF@$TYPE_OP
POPS LF@$OP                                 #Naplni OP
TYPE LF@$TYPE_OP LF@$OP
JUMPIFEQ $STRVAL_END LF@$TYPE_OP string@string                  # str to str
JUMPIFEQ $STRVAL_OP_IS_INT  LF@$TYPE_OP string@int
JUMPIFEQ $STRVAL_OP_IS_FLOAT  LF@$TYPE_OP string@float
JUMPIFEQ $STRVAL_OP_IS_BOOL LF@$TYPE_OP string@bool
JUMPIFEQ $STRVAL_OP_IS_NULL LF@$TYPE_OP string@null

LABEL $STRVAL_OP_IS_FLOAT
LABEL $STRVAL_OP_IS_INT
#UNSUPPORT TYPE
    EXIT int@4


LABEL $STRVAL_OP_IS_BOOL
    JUMPIFEQ $STRVAL_BOOL_ISN_ZERO LF@$OP bool@false 
    PUSHS string@1
    POPFRAME
    RETURN
    LABEL $STRVAL_BOOL_IS_ZERO                            #OP == FALSE
    PUSHS string@0  
    POPFRAME                           
    RETURN

LABEL $STRVAL_OP_IS_NULL
    PUSHS string@
    RETURN

LABEL $STRVAL_END
    PUSHS LF@$OP
    POPFRAME
    RETURN

##########################################################
#Vraci hodnotu prevedenou do BOOL
LABEL $boolval
PUSHFRAME
DEFVAR LF@$OP
DEFVAR LF@$TYPE_OP
POPS LF@$OP                                 #Naplni OP
TYPE LF@$TYPE_OP LF@$OP

JUMPIFEQ $BOOLVAL_END LF@$TYPE_OP string@bool                  # str to str
JUMPIFEQ $BOOLVAL_OP_IS_INT  LF@$TYPE_OP string@int
JUMPIFEQ $BOOLVAL_OP_IS_FLOAT  LF@$TYPE_OP string@float
JUMPIFEQ $BOOLVAL_OP_IS_STR LF@$TYPE_OP string@string
JUMPIFEQ &BOOLVAL_OP_IN_NULL LF@$TYPE_OP string@null

LABEL $BOOLVAL_OP_IS_INT
    JUMPIFEQ $INT_OP_IS_ZERO LF@$OP int@0
    PUSHS bool@true
    POPFRAME
    RETURN
    LABEL $INT_OP_IS_ZERO
    PUSHS bool@false
    POPFRAME
    RETURN

LABEL $BOOLVAL_OP_IS_FLOAT
    JUMPIFEQ $FLOAT_OP_IS_ZERO LF@$OP float@0x0.0p+0
    PUSHS bool@true
    POPFRAME
    RETURN
    LABEL $FLOAT_OP_IS_ZERO
    PUSHS bool@false
    POPFRAME
    RETURN

LABEL $BOOLVAL_OP_IS_STR    
    JUMPIFEQ $STR_OP_IS_EMPTY LF@$OP string@
    PUSHS bool@true
    POPFRAME
    RETURN
    LABEL $STR_OP_IS_EMPTY
    PUSHS bool@false
    POPFRAME
    RETURN

LABEL &BOOLAVL_OP_IN_NULL
    PUSHS bool@false
    POPFRAME
    RETURN

LABEL $BOOLVAL_END
    PUSHS LF@$OP
    POPFRAME
    RETURN
###############################################################
#ORD & CHR
###############################################################
#ORD(op) => int hodnota op
LABEL $ORD
PUSHFRAME
PUSHS int@0
STRI2INTS
POPFRAME
RETURN
###############################################################
#CHR(op) => prevod int so ascii
LABEL $CHR
PUSHFRAME
INT2CHARS
POPFRAME
RETURN
###############################################################
#COMPARE
###############################################################
#LT(op1, op2)  <
#Vrací true/false na stack
LABEL $LT
PUSHFRAME
CALL $TO_GOOD_TYPE
LTS
POPFRAME
RETURN
###############################################################
#GT(op1, op2)  >
#Vrací true/false na stack
LABEL $GT
PUSHFRAME
CALL $TO_GOOD_TYPE
GTS
POPFRAME
RETURN
################################################################
#EQ(op1, op2)   ==
#Vrací true/false na stack
LABEL $EQ
PUSHFRAME
CALL $TO_GOOD_TYPE
EQS
POPFRAME
RETURN
###############################################################
#LTEQ(op1, op2)  LT || EQ
#Vrací true/false na stack
LABEL $LTEQ
PUSHFRAME
CALL $TO_GOOD_TYPE
DEFVAR LF@$OP1
DEFVAR LF@$OP2
DEFVAR LF@$LT_RES
DEFVAR LF@$EQ_RES
DEFVAR LF@$OR_RES
POPS LF@$OP1
POPS LF@$OP2
LT LF@$LT_RES LF@$OP1 LF@$OP2
EQ LF@$EQ_RES LF@$OP1 LF@$OP2
OR LF@$OR_RES LF@$LT_RES LF@$EQ_RES
PUSHS LF@$OR_RES
POPFRAME
RETURN
###############################################################
#GTEQ(op1, op2)  GT || EQ
#Vrací true/false na stack
LABEL $GTEQ
PUSHFRAME
CALL $TO_GOOD_TYPE
DEFVAR LF@$OP1
DEFVAR LF@$OP2
DEFVAR LF@$GT_RES
DEFVAR LF@$EQ_RES
DEFVAR LF@$OR_RES
POPS LF@$OP1
POPS LF@$OP2
GT LF@$GT_RES LF@$OP1 LF@$OP2
EQ LF@$EQ_RES LF@$OP1 LF@$OP2
OR LF@$OR_RES LF@$GT_RES LF@$EQ_RES
PUSHS LF@$OR_RES
POPFRAME
RETURN
###############################################################
#ARITMETIC
###############################################################

#funkce kontroluje a pripadne nastavuje typy tak 
#aby se s nimi dali provézt aritemtické operace
#ARITMETICT_TYPE(op1, op2)
#op1, op2 mohou být typ int, float, bool

#Povolené INT, FLOAT a BOOL
LABEL $ARITMETICT_TYPE  
PUSHFRAME
CREATEFRAME
DEFVAR TF@$op1
DEFVAR TF@$op2
DEFVAR TF@op1$type
DEFVAR TF@op2$type

POPS TF@$op1
POPS TF@$op2
TYPE TF@op1$type TF@$op1
TYPE TF@op2$type TF@$op2

JUMPIFNEQ $ART_NOT_EQL_TYPES TF@op1$type TF@op2$type
PUSHS TF@$op1
PUSHS TF@$op2
JUMP $ART_END

LABEL $ART_NOT_EQL_TYPES
JUMPIFEQ $ATR_CONVERT_OP2_TO_FLOAT TF@op1$type string@float
JUMPIFEQ $ATR_CONVERT_OP1_TO_FLOAT TF@op2$type string@float
JUMPIFEQ $ATR_CONVERT_OP1_FROM_BOOL TF@op1$type string@bool
JUMPIFEQ $ATR_CONVERT_OP2_FROM_BOOL TF@op2$type string@bool

LABEL $ATR_CONVERT_OP1_TO_FLOAT
    PUSHS TF@$op1
    PUSHS TF@$op2
    CALL $TO_GOOD_TYPE
    JUMP $ART_END

LABEL $ATR_CONVERT_OP2_TO_FLOAT
    PUSHS TF@$op2
    PUSHS TF@$op1
    CALL $TO_GOOD_TYPE
    JUMP $ART_END

LABEL $ATR_CONVERT_OP1_FROM_BOOL
    PUSHS TF@$op1
    PUSHS TF@$op2
    CALL $TO_GOOD_TYPE
    JUMP $ART_END

LABEL $ATR_CONVERT_OP2_FROM_BOOL
    PUSHS TF@$op2
    PUSHS TF@$op1
    CALL $TO_GOOD_TYPE
    JUMP $ART_END

LABEL $ART_END
POPFRAME
RETURN

#####################################################################
LABEL $MUL
PUSHFRAME
CALL $ARITMETICT_TYPE
MULS
POPFRAME
RETURN
#####################################################################
LABEL $DIV
PUSHFRAME
CALL $ARITMETICT_TYPE
DIVS
POPFRAME
RETURN
#####################################################################
LABEL $ADD
PUSHFRAME
CALL $ARITMETICT_TYPE
ADDS
POPFRAME
RETURN
#####################################################################
LABEL $SUB
PUSHFRAME
CALL $ARITMETICT_TYPE
SUBS
POPFRAME
RETURN
